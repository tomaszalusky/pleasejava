JAVA MODEL:
	pleasejava.test.javatype.TestInterface = CLASS MODEL (interface pleasejava.test.javatype.TestInterface)
		IMPORTS:
			java.util.List
			java.util.Map
			java.util.Vector
			pleasejava.test.RecordA1
			pleasejava.test.RecordA2
			pleasejava.test.RecordB1
			pleasejava.test.RecordB2
			plsql.Plsql.NestedTable
			plsql.Plsql.Procedure
		FIELDS:
		METHODS:
			m1 = METHOD MODEL ([] m1)
				ANNOTATIONS:
					@Procedure("a_test_package.foo")
				PARAMETERS:
					a1 = PARAMETER MODEL (a1)
						ANNOTATIONS:
						TYPE:
							@NestedTable("a_test_package.tableofrec") List<RecordA1>
					b1 = PARAMETER MODEL (b1)
						ANNOTATIONS:
						TYPE:
							@NestedTable("a_test_package.tableofrec") Vector<RecordB1>
			m2 = METHOD MODEL ([] m2)
				ANNOTATIONS:
					@Procedure("a_test_package.foo")
				PARAMETERS:
					a2 = PARAMETER MODEL (a2)
						ANNOTATIONS:
						TYPE:
							@NestedTable("a_test_package.tableofrec") Map<Integer,RecordA2>
					b2 = PARAMETER MODEL (b2)
						ANNOTATIONS:
						TYPE:
							RecordB2 @NestedTable("a_test_package.tableofrec") []
	pleasejava.test.javatype.RecordA1 = CLASS MODEL (class pleasejava.test.javatype.RecordA1)
		IMPORTS:
			plsql.Plsql.Integer_
			plsql.Plsql.Varchar2
		FIELDS:
			fi = FIELD MODEL ([private] fi)
				ANNOTATIONS:
				TYPE:
					@Integer_ int
			fs = FIELD MODEL ([private] fs)
				ANNOTATIONS:
				TYPE:
					@Varchar2(200) String
		METHODS:
			getFi = METHOD MODEL ([public] getFi)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fi;
			setFi = METHOD MODEL ([public] setFi)
				ANNOTATIONS:
				PARAMETERS:
					fi = PARAMETER MODEL (fi)
						ANNOTATIONS:
						TYPE:
							@Integer_ int
				BODY:
					this.fi = fi;
			getFs = METHOD MODEL ([public] getFs)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fs;
			setFs = METHOD MODEL ([public] setFs)
				ANNOTATIONS:
				PARAMETERS:
					fs = PARAMETER MODEL (fs)
						ANNOTATIONS:
						TYPE:
							@Varchar2(200) String
				BODY:
					this.fs = fs;
	pleasejava.test.javatype.RecordB1 = CLASS MODEL (class pleasejava.test.javatype.RecordB1)
		IMPORTS:
			java.math.BigInteger
			plsql.Plsql.Integer_
			plsql.Plsql.Varchar2
		FIELDS:
			fi = FIELD MODEL ([private] fi)
				ANNOTATIONS:
				TYPE:
					@Integer_ BigInteger
			fs = FIELD MODEL ([private] fs)
				ANNOTATIONS:
				TYPE:
					@Varchar2(200) String
		METHODS:
			getFi = METHOD MODEL ([public] getFi)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fi;
			setFi = METHOD MODEL ([public] setFi)
				ANNOTATIONS:
				PARAMETERS:
					fi = PARAMETER MODEL (fi)
						ANNOTATIONS:
						TYPE:
							@Integer_ BigInteger
				BODY:
					this.fi = fi;
			getFs = METHOD MODEL ([public] getFs)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fs;
			setFs = METHOD MODEL ([public] setFs)
				ANNOTATIONS:
				PARAMETERS:
					fs = PARAMETER MODEL (fs)
						ANNOTATIONS:
						TYPE:
							@Varchar2(200) String
				BODY:
					this.fs = fs;
	pleasejava.test.javatype.RecordA2 = CLASS MODEL (class pleasejava.test.javatype.RecordA2)
		IMPORTS:
			plsql.Plsql.Integer_
			plsql.Plsql.Varchar2
		FIELDS:
			fi = FIELD MODEL ([private] fi)
				ANNOTATIONS:
				TYPE:
					@Integer_ int
			fs = FIELD MODEL ([private] fs)
				ANNOTATIONS:
				TYPE:
					@Varchar2(200) StringBuilder
		METHODS:
			getFi = METHOD MODEL ([public] getFi)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fi;
			setFi = METHOD MODEL ([public] setFi)
				ANNOTATIONS:
				PARAMETERS:
					fi = PARAMETER MODEL (fi)
						ANNOTATIONS:
						TYPE:
							@Integer_ int
				BODY:
					this.fi = fi;
			getFs = METHOD MODEL ([public] getFs)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fs;
			setFs = METHOD MODEL ([public] setFs)
				ANNOTATIONS:
				PARAMETERS:
					fs = PARAMETER MODEL (fs)
						ANNOTATIONS:
						TYPE:
							@Varchar2(200) StringBuilder
				BODY:
					this.fs = fs;
	pleasejava.test.javatype.RecordB2 = CLASS MODEL (class pleasejava.test.javatype.RecordB2)
		IMPORTS:
			java.math.BigInteger
			plsql.Plsql.Integer_
			plsql.Plsql.Varchar2
		FIELDS:
			fi = FIELD MODEL ([private] fi)
				ANNOTATIONS:
				TYPE:
					@Integer_ BigInteger
			fs = FIELD MODEL ([private] fs)
				ANNOTATIONS:
				TYPE:
					@Varchar2(200) StringBuilder
		METHODS:
			getFi = METHOD MODEL ([public] getFi)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fi;
			setFi = METHOD MODEL ([public] setFi)
				ANNOTATIONS:
				PARAMETERS:
					fi = PARAMETER MODEL (fi)
						ANNOTATIONS:
						TYPE:
							@Integer_ BigInteger
				BODY:
					this.fi = fi;
			getFs = METHOD MODEL ([public] getFs)
				ANNOTATIONS:
				PARAMETERS:
				BODY:
					return fs;
			setFs = METHOD MODEL ([public] setFs)
				ANNOTATIONS:
				PARAMETERS:
					fs = PARAMETER MODEL (fs)
						ANNOTATIONS:
						TYPE:
							@Varchar2(200) StringBuilder
				BODY:
					this.fs = fs;
